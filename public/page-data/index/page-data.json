{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allAsciidoc":{"edges":[{"node":{"id":"cf3b9dca-d453-5ef9-8487-e12ff13f77ba","html":"<h1>Blueprints</h1>\n<div class=\"sect1\">\n<h2 id=\"_what_are_blueprints\">What are blueprints?</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Blueprints are a quick way to build something cool on Koji. Each blueprint includes a simple, block-by-block guide and an “as-built” code sample for a fun Koji application.</p>\n</div>\n<div class=\"paragraph\">\n<p>These blueprints are intended for developers who prefer to jump straight to code. For a step-by-step intro to Koji, head to the <a href=\"/developer/getting-started\">starter guide</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_build_your_application\">Build your application</h2>\n<div class=\"sectionbody\">\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"/developer/magazine-cover\">Magazine cover</a> - Add customizable images and text to put your own picture and headline on a magazine.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>","document":{"title":"Blueprints"},"pageAttributes":{"slug":"/blueprints"}}},{"node":{"id":"4417a3f6-3776-5dde-a0b6-9c8b7f3e1cdd","html":"<h1>Koji Developer Portal</h1>\n<div class=\"sect1\">\n<h2 id=\"_about_koji\">About Koji</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Koji is a platform that enables anyone, including non-techies, to\nquickly create interactive content, such as selfies, memes, games, and\nutilities. Kojis can be shared via a link on social media and messengers\nas well as in an embedded iframe on a website.</p>\n</div>\n<div class=\"paragraph\">\n<p>As a developer, you can build web applications on Koji, called\n“templates,” that enable users to customize, or “remix,” them without\ncoding. At their core, Koji templates are embeddable, mini-web\napplications written in modern JavaScript. They are designed to be\nresponsive, so that they can run on any browser and every device. They\nalso enable non-technical users to quickly edit elements, such as\nimages, text, and sounds, to create a custom version that they can share\nanywhere on the web.</p>\n</div>\n<div class=\"paragraph\">\n<p>On Koji, you can develop templates that will be used and shared by\nmillions of users across the world. You can also monetize your work\nthrough licensing, asset packs, and other developer compensation\nprograms. With the ability to create and share remixable, interactive\ncontent, the opportunities for creative new applications and experiences\nare countless. We can’t wait to see what YOU make!</p>\n</div>\n<div class=\"paragraph\">\n<p><span class=\"image\"><img src=\"/images/Koji-developer.svg\" alt=\"Overview of the Koji development process\" title=\"Koji development process\"></span></p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\">Getting Started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>For some great resources to help you start developing templates on Koji,\nsee:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><a href=\"../gettingStarted/startGuide1.adoc\">Starter guide</a> –\nStep-by-step instructions on how to create a remixable web application\nand publish it as a template on Koji.</p>\n</li>\n<li>\n<p><a href=\"https://withkoji.com/developer/getting-started-course\">Starter course</a> – Video\ntutorial of how to start developing applications on Koji.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_staying_in_touch\">Staying in Touch</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Join the <a href=\"https://discord.gg/eQuMJF6\">Koji community</a> on Discord to\nconnect with other developers, makers, and the Koji team. The community\nis the best place to share tips and tricks, provide peer feedback, and\nget support.</p>\n</div>\n<div class=\"paragraph\">\n<p>Subscribe to the <a href=\"http://eepurl.com/g5odab\">developer email list</a> to keep\nup with the latest announcements, featured content, events, and\ndeveloper programs.</p>\n</div>\n</div>\n</div>","document":{"title":"Koji Developer Portal"},"pageAttributes":{"slug":"/getting-started"}}},{"node":{"id":"a6d9a088-e34e-58f1-9117-73c5a0b3b19f","html":"<h1>Developing your first Koji template</h1>\n<div class=\"sect1\">\n<h2 id=\"_summary\">Summary</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>On the Koji platform, you can develop JavaScript web applications that can be customized without coding. Instead, non-technical users can use Visual Customization Controls (VCCs) to quickly edit elements of the application, such as images, text, and sounds.</p>\n</div>\n<div class=\"paragraph\">\n<p>In this starter guide, you will start with an existing web\napplication on Koji, called a “template,” and add the ability to customize, or “remix,” it. You will use the Koji editor and an npm package from Koji to define the customizable elements. Then, you will publish your application as a new template so that Koji users can create their own customized versions of it.</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_remixing_the_starter_template\">Remixing the starter template</h2>\n<div class=\"sectionbody\">\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>If you haven’t already, create an account at <a href=\"https://withkoji.com\">withkoji.com</a>.</p>\n</li>\n<li>\n<p>Go to <a href=\"https://withkoji.com/templates/seane/react-project-no-vccs\">https://withkoji.com/templates/seane/react-project-no-vccs</a>.</p>\n</li>\n<li>\n<p>Click <strong>Create Remix</strong>.</p>\n<div class=\"paragraph\">\n<p>This action creates a clone of the starter template, and opens it in the Koji editor.</p>\n</div>\n</li>\n<li>\n<p>Explore the template and the Koji editor.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In the right pane, you can see a live preview of the template.</p>\n</li>\n<li>\n<p>In the left pane, you can click <strong>Source Code</strong> to expand the file browser. From here, you can open and edit your project files in the editor.</p>\n</li>\n<li>\n<p>At the bottom, you can expand a set of terminal tabs. These tabs enable you to run the template locally from inside the editor and to execute other terminal functions, such as adding packages and committing changes.</p>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIf you make changes to your project’s structure (by adding npm packages, for example), you might need to exit the running process and restart the development server in the <code>frontend</code> terminal.\n</td>\n</tr>\n</table>\n</div>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_installing_the_withkojivcc_package\">Installing the @withkoji/vcc package</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The @withkoji/vcc package allows your template to access dynamic values that are stored in customization files. It also allows you to expose VCCs so that a user can change the customizable items in your template. Finally, it provides a watcher function that allows you to monitor changes to customization files and perform a real-time set of the dynamic values stored in the customization files.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the terminal, navigate to the <code>frontend</code> folder of your template.</p>\n</li>\n<li>\n<p>Cancel the running process (for example, press <strong>Ctrl+C</strong>).</p>\n</li>\n<li>\n<p>Install the latest version of the package:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">npm install --save @withkoji/vcc</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>In the <code>frontend</code> folder of your project, reconfigure the\n<code>package.json</code> file to run the watcher concurrently with your\ndevelopment server. You can use a package like npm-run-all. For example:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">\"build\": \"NODE_ENV=production webpack --config ./.internals/webpack.production.js --color -p --progress --hide-modules --display-optimization-bailout\",\n\"start\": \"npm-run-all -p watch start:server\",\n\"watch\": \"koji-vcc watch\",\n\"start:server\": \"node index.js\" <b class=\"conum\">(1)</b></code></pre>\n</div>\n</div>\n<div class=\"colist arabic\">\n<ol>\n<li>\n<p>Replace with the \"start\" command for your project</p>\n</li>\n</ol>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\n<div class=\"paragraph\">\n<p>If you follow the example pattern, you must also install the npm-run-all package:</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">npm install --save-dev npm-run-all</code></pre>\n</div>\n</div>\n</td>\n</tr>\n</table>\n</div>\n</li>\n<li>\n<p>Restart the process to reflect the new changes:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">npm start</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_creating_a_customization_file\">Creating a customization file</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>A customization file is a JSON file that defines the names and types of the customizable values in a template, so that Koji can display the appropriate VCCs for remixers.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the <code>.koji/customization</code> folder of your project, create a new JSON file.</p>\n<div class=\"olist loweralpha\">\n<ol class=\"loweralpha\" type=\"a\">\n<li>\n<p>In the file browser, click the plus (<strong>+</strong>) next to the <code>.koji/customization</code> folder, and click <strong>New File</strong>.</p>\n</li>\n<li>\n<p>Enter a name for the file. For example: <code>settings.json</code>.</p>\n</li>\n</ol>\n</div>\n</li>\n<li>\n<p>Paste the following code into your <code>settings.json</code> file.</p>\n<div class=\"paragraph\">\n<p>This code defines a scope and the customizable values within that scope.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">{\n  \"settings\": {\n  \"title\": \"Hello World!\"\n},\n\"@@editor\": [\n  {\n    \"key\": \"settings\",\n    \"name\": \"App settings\",\n    \"icon\": \"⚙️\",\n    \"source\": \"settings.json\",\n    \"fields\": [\n        {\n          \"key\": \"title\",\n          \"name\": \"App title\",\n          \"type\": \"text\"\n          }\n        ]\n      }\n    ]\n  }</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Press <strong>Ctrl-S</strong> to save the file.</p>\n<div class=\"paragraph\">\n<p>A new item appears in the <strong>Customization</strong> section of the left pane.</p>\n</div>\n</li>\n<li>\n<p>Click the item in the <strong>Customization</strong> section to display the associated VCC in the editor.</p>\n<div class=\"paragraph\">\n<p>In this example, the file stores one customizable value (<code>settings.title</code>), and Koji displays a text VCC to collect this value from a remixer.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_accessing_the_values_stored_in_a_customization_file\">Accessing the values stored in a customization file</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To access a value from a JSON customization file within a template, you use a getter from the @withkoji/vcc package. Then, update the template to use dynamic values, instead of hard-coded values.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>From the left pane of the editor, open the <code>frontend/common/App.js</code> file.</p>\n<div class=\"paragraph\">\n<p>This file contains most of the template logic.</p>\n</div>\n</li>\n<li>\n<p>At the top of the file, import the package.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">import { InstantRemixing } from '@withkoji/vcc';</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>In the React component, add the <code>componentDidMount</code> method.</p>\n<div class=\"paragraph\">\n<p>This method creates a new instance of the <code>InstantRemixing</code> class to use in the template.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">componentDidMount() {\nthis.instantRemixing = new InstantRemixing();\nconsole.log('instantRemixing', this.instantRemixing); // Confirm w/log\n\n// Alert Koji we are ready to use instantRemixing\nthis.instantRemixing.ready();\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>Create a state to handle updates to the title (<code>h1</code>) value, and update the contents of the <code>h1</code> element to use the dynamic value.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">class App extends React.Component {\n  state = {\n    title: '',\n};\n\n...\n\nrender() {\n  return (\n    &lt;Container&gt;\n      &lt;h1&gt;{this.state.title}&lt;/h1&gt;\n      &lt;Image src={'https://images.koji-cdn.com/d9c6b38e-08c4-4faf-ae8e-01082c41a0fb/3f83q-9634d620e97345a6b250ca2feb7e5a2e.png'} /&gt;\n    &lt;/Container&gt;\n);\n}\n}</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>In the <code>componentDidMount</code> method, use the getter function from <code>instantRemixing</code> to get the default value from the customization file.</p>\n<div class=\"paragraph\">\n<p>The getter accepts an array (<code>[scope, key]</code>) that maps to the scope (<code>settings</code>) and key (<code>title</code>) from the JSON customization file.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">componentDidMount() {\n  this.instantRemixing = new InstantRemixing();\n\n  // Set the default value\n  this.setState({\n    title: this.instantRemixing.get(['settings', 'title'])\n  });\n\n  // Alert Koji we are ready to use instantRemixing\n  this.instantRemixing.ready();\n}</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_reacting_to_updated_values\">Reacting to updated values</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When a remixer enters a new value, the template must update automatically to reflect the change.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In the <code>componentDidMount</code> method, set up a listener to monitor for changes to the template value:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">componentDidMount() {\n  this.instantRemixing = new InstantRemixing();\n\n// Alert Koji we are ready to use instantRemixing\nthis.instantRemixing.ready();\n\n// Set the default value\nthis.setState({\n  title: this.instantRemixing.get(['settings', 'title'])\n});\n\n// Set up a listener to update title value\nthis.instantRemixing.onValueChanged((path, newValue) =&gt; {\n  if (path[0] &amp;&amp; path[1] &amp;&amp; path[0] === 'settings' &amp;&amp; path[1] === 'title') {\n    this.setState({ title: newValue });\n  }\n});\n}</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_testing_the_current_state_of_the_template\">Testing the current state of the template</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>At this point, the template should be configured to use the default value from the customization file and to react to value changes that are made from VCCs. To test this configuration, you can use the built-in VCC and live preview in the Koji editor.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the top right of the <strong>Live Preview</strong> pane, click <strong>Refresh</strong> to make sure you are seeing the latest version.</p>\n</li>\n<li>\n<p>From the left pane of the editor, click <strong>Customization &gt; App Settings</strong> to open the VCC for the <code>settings.json</code> customization file.</p>\n</li>\n<li>\n<p>In the VCC, update the value in the <strong>App title</strong> field.</p>\n<div class=\"paragraph\">\n<p>The preview window should reflect your update automatically.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_determining_the_current_view_of_the_template\">Determining the current view of the template</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The template must display differently and expose different click handlers depending on whether a user is viewing or customizing the template. In this example, you will add styles to show that the <code>h1</code> element is editable and a click handler to expose a VCC when a user is customizing the template.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Create a property (<code>isRemixing</code>) to track the current view state, and set the initial state with a placeholder value.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">state = {\n  isRemixing: false,\n  title: '',\n};</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>In the <code>componentDidMount</code> method, add the default value (<code>this.instantRemixing.isRemixing</code>) to the <code>setState</code> function, and add a listener that monitors the template for view changes.</p>\n<div class=\"paragraph\">\n<p>This listener allows you to use <code>this.state.isRemixing</code> as a source of truth for the current view of the template.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">componentDidMount() {\nthis.instantRemixing = new InstantRemixing();\n\n// Set the default value for title and isRemixing state\nthis.setState({\n  isRemixing: this.instantRemixing.isRemixing,\n  title: this.instantRemixing.get(['settings', 'title'])\n});\n\n  // Set up a listener to update title value\nthis.instantRemixing.onValueChanged((path, newValue) =&gt; {\n  if (path[0] &amp;&amp; path[1] &amp;&amp; path[0] === 'settings' &amp;&amp; path[1] === 'title') {\n    this.setState({ title: newValue });\n  }\n});\n\n// Toggle the isRemixing state based on the listener\nthis.instantRemixing.onSetRemixing((isRemixing) =&gt; {\n  this.setState({ isRemixing });\n});\n\n// Alert Koji we are ready to use instantRemixing\nthis.instantRemixing.ready();\n}</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_exposing_the_vcc\">Exposing the VCC</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>The template must expose a way for a remixer to open the VCC when customizing it.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Add a click handler to the <code>h1</code> element that opens the VCC when the remixer clicks the title.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">handleClick = () =&gt; {\n  // Conditionally handle the click, only if the template is being remixed\nif (this.state.isRemixing) {\nthis.instantRemixing.onPresentControl(['settings', 'title']);\n}\n};\n\nrender() {\n  return (\n    &lt;Container&gt;\n      &lt;h1 onClick={this.handleClick}&gt;{this.state.title}&lt;/h1&gt;\n      &lt;Image src={'https://images.koji-cdn.com/d9c6b38e-08c4-4faf-ae8e-01082c41a0fb/3f83q-9634d620e97345a6b250ca2feb7e5a2e.png'} /&gt;\n    &lt;/Container&gt;\n  );\n}</code></pre>\n</div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_testing_the_expose_function\">Testing the expose function</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To test whether the expose function is working, you can use the <strong>Editing</strong> tab of the <strong>Live Preview</strong> pane. This feature enables you to test the template as if it were published on Koji.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>In the <strong>Live Preview</strong> pane, click <strong>Editing</strong> to switch to the template editing mode.</p>\n</li>\n<li>\n<p>Click the title in the preview.</p>\n<div class=\"paragraph\">\n<p>The VCC should open automatically and allow for text input. If this test works correctly, the VCC should be exposed correctly to the remixer in your published template.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_styling_the_customizable_item\">Styling the customizable item</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To indicate that an item is “editable,” you can add a conditional visual effect that is displayed when the template is being customized. In this example, you’ll add a CSS style class for editable items and then apply the class to the <code>h1</code> when a user is customizing the template.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>From the left pane of the editor, open the <code>frontend/common/index.html</code> file.</p>\n</li>\n<li>\n<p>Add the following CSS style in the <code>head</code> element.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-HTML\" data-lang=\"HTML\">&lt;style&gt;\n  .active {\n    background-color: rgba(255, 255, 255, 0.4);\n    padding: 18px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: rgb(255, 255, 255);\n    border-image: initial;\n    border-radius: 4px;\n  }\n&lt;/style&gt;</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>In the <code>App.js</code> file, update the <code>h1</code> element with a dynamic <code>className</code>.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">&lt;h1\n  className={this.state.isRemixing ? 'active' : ''}\n  onClick={this.handleClick}\n  &gt;\n  {this.state.title}\n&lt;/h1&gt;</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>To test the dynamic <code>className</code>, you can toggle the live preview between the <strong>Editing</strong> and <strong>Preview</strong> modes.</p>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In <strong>Editing</strong> mode, the “editable” styles should be visible, and the click handler should open the VCC, as expected.</p>\n</li>\n<li>\n<p>In <strong>Preview</strong> mode, the “editable” styles should not be visible, and nothing should happen when clicking the <code>h1</code> element.</p>\n</li>\n</ul>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_making_the_template_feed_aware\">Making the template “feed-aware”</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Koji uses a feed to enable users to browse available templates. As with traditional social feeds, items move from off screen or out of focus, into the main window inside the feed. To ensure the template is displayed correctly in the Koji feed, you use the FeedSdk from the @withkoji/vcc package to set the template state and handle transitions between on and off screen and in and out of focus.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Import the <code>FeedSdk</code> from the @withkoji/vcc package.</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">import { FeedSdk, InstantRemixing } from '@withkoji/vcc';</code></pre>\n</div>\n</div>\n</li>\n<li>\n<p>At the end of the <code>componentDidMount</code> method, add the following code to display the template in the feed.</p>\n<div class=\"paragraph\">\n<p>This code creates an instance of the feed and calls a load function to indicate that the template is ready to be displayed in the feed, which is all that is required when the template does not use autoplay.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JavaScript\" data-lang=\"JavaScript\">this.feed = new FeedSdk();\nthis.feed.load();</code></pre>\n</div>\n</div>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nIf you plan to develop apps that autoplay when focused in the feed, you can use the <code>onPlaybackStateChanged</code> listener to monitor for real-time updates as the template enters and leaves focus in the feed, similar to how this example uses <code>onSetRemixing</code>.\n</td>\n</tr>\n</table>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_adding_entitlements_for_the_koji_profiler\">Adding entitlements for the Koji profiler</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>When you publish the template, it is submitted into a queue for profiling. The Koji profiler checks for errors and generates metadata about the application. If the template is error-free, the profiler enables additional platform features for your template, including the instant remix option and inclusion in the feed. To prepare your template to be profiled correctly, you must add entitlements for some of these features.</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>In the <code>.koji/project</code> folder, create an <code>entitlements.json</code> file with the following code:</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-JSON\" data-lang=\"JSON\">link:../codeSamples/entitlements.json[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>This code indicates that the template supports remixes and is ready to be listed in the feed.</p>\n</div>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_publishing_the_template\">Publishing the template</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>At this point, the template is ready to be published.</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>To view the template on the staging server before you publish it, click the <strong>Remote</strong> tab in the right pane, and then use one of the options to open a preview in another tab or on another device.</p>\n</li>\n<li>\n<p>In the upper left of the editor, click <strong>Publish Now</strong> to open the publish settings.</p>\n</li>\n<li>\n<p>Give your template a unique name and add a description.</p>\n<div class=\"admonitionblock note\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Note</div>\n</td>\n<td class=\"content\">\nThe permalink URL to your template is based on the name when you first publish it, so be sure to enter the name you want to use going forward. You can republish it to update any template functionality and settings, but the link remains the same.\n</td>\n</tr>\n</table>\n</div>\n</li>\n<li>\n<p>Click <strong>Publish</strong>.</p>\n<div class=\"paragraph\">\n<p>A message appears to indicate that the publishing process has started.\nWhen publishing is completed, a link appears in the message.</p>\n</div>\n</li>\n<li>\n<p>Click the link to view and test your live template.</p>\n<div class=\"paragraph\">\n<p>The template might be published before profiling is completed.\nTherefore, you might need to wait longer before testing features that require profiling, such as inclusion in the feed or the ability to instantly remix the template. To see the results of the most recent profiling, from your live template, click <strong>Make your own &gt; Fork template</strong> to open the template welcome screen. Then, under <strong>More options</strong>, click <strong>See profiled attributes</strong>.</p>\n</div>\n<div class=\"paragraph\">\n<p>If an error message appears when you open the link after profiling is completed, you can review the steps in this guide to fix it. To open your project again, go to <strong>Koji home &gt; My projects</strong>, and click the template name.</p>\n</div>\n</li>\n</ol>\n</div>\n</div>\n</div>","document":{"title":"Developing your first Koji template"},"pageAttributes":{"slug":"/getting-started/guide-1"}}},{"node":{"id":"a935c2df-9d40-5faa-899f-1a686e2212d2","html":"<h1>Magazine Cover Template</h1>\n<div class=\"sect1\">\n<h2 id=\"_summary\">Summary</h2>\n<div class=\"sectionbody\">\n<div id=\"img-overview\" class=\"imageblock\">\n<div class=\"content\">\n<img src=\"/images/magazine-cover.png\" alt=\"Make a magazine cover template on Koji\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Follow this blueprint to build a template for your own picture and headline on a magazine cover. You will add customizable images and text, and then publish the template on Koji.</p>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_prerequisites\">Prerequisites</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Familiarity with web development. React and ES6 basics are a plus.</p>\n</li>\n<li>\n<p>Familiarity with the Koji remix process. For an overview, see the <a href=\"/developer/getting-started\">starter guide</a>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_level\">Level</h3>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><strong>Koji</strong>: Beginner – Intermediate</p>\n</li>\n<li>\n<p><strong>Developer</strong>: Intermediate – Advanced</p>\n</li>\n<li>\n<p><strong>Time</strong>: 45 minutes</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_building_blocks\">Building blocks</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_remix_the_scaffold\">Remix the scaffold</h3>\n<div class=\"paragraph\">\n<p>Remix an existing web application on Koji that implements basic elements of your favorite framework.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://withkoji.com/~seane/simple-react-scaffold\"><a href=\"https://withkoji.com/~seane/simple-react-scaffold\" class=\"bare\">https://withkoji.com/~seane/simple-react-scaffold</a></a></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_install_the_packages\">Install the packages</h3>\n<div class=\"paragraph\">\n<p>Install @withkoji/vcc to expose Visual Customization Controls (VCCs), dynamically update custom values, and display your template correctly in the Koji feed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-bash\" data-lang=\"bash\">npm install --save @withkoji/vcc</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_create_the_customization_files\">Create the customization files</h3>\n<div class=\"paragraph\">\n<p>Create <code>.koji/customization/settings.json</code> to define customizable values for the magazine name, cover image, background color, and text options (text, size, color, and position).</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">link:../codeSamples/magazineCoverSettings.json[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Remove the unused customization files.</p>\n</div>\n<div class=\"paragraph\">\n<p><code>colors.json</code>, <code>images.json</code>, and <code>strings.json</code></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_add_the_template_logic\">Add the template logic</h3>\n<div class=\"paragraph\">\n<p>Import the packages.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Use <code>InstantRemixing</code> to get and set custom values.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Use <code>FeedSdk</code> to display the template in the Koji feed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Monitor the remix state.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Dynamically get and set custom values.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Optimize the user&#8217;s cover image.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Add click handlers for editable elements.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Use dynamic sizing to support different browsers and devices.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Indicate the template is ready for instant remixes and to display in the feed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Render the template with custom values. Apply conditional styling to editable elements during remix.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Render a view to use as the rich preview image when the template is shared on social media.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_add_the_styles\">Add the styles</h3>\n<div class=\"paragraph\">\n<p>Define styles for the template, including the headline, cover image. Define styles for the rich preview image. Remove unused styles.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Add styles for editable elements during remix.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-css\" data-lang=\"css\">.editable {\n  border: 2px dashed grey;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>Add the font stylesheet.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-html\" data-lang=\"html\">&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto&amp;display=swap\" rel=\"stylesheet\"&gt;</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_add_entitlements\">Add entitlements</h3>\n<div class=\"paragraph\">\n<p>Create <code>.koji/project/entitlements.json</code> and enable instant remix support and listing in the Koji feed.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-json\" data-lang=\"json\">link:../codeSamples/entitlements.json[]</code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_test\">Test</h3>\n<div class=\"paragraph\">\n<p>Use the tools in the Koji editor to test template functionality. For example:</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>Template default view: <strong>Refresh</strong> the <strong>Live preview</strong> tab.</p>\n</li>\n<li>\n<p>Conditional styling of editable elements: In the live preview, switch between <strong>Preview</strong> and <strong>Editing</strong> mode.</p>\n</li>\n<li>\n<p>VCC targeting: In <strong>Editing</strong> mode, click each editable element. The corresponding VCC should open.</p>\n</li>\n<li>\n<p>Remix functionality: In the JSON file, switch to <strong>Visual</strong> view, and use VCC editor to customize values. The template should update immediately.</p>\n</li>\n<li>\n<p>Template styles on another browser or device: On the <strong>Remote</strong> tab, copy the URL or use the QR code to open a link to the staging server.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_publish\">Publish</h3>\n<div class=\"paragraph\">\n<p>Click <strong>Publish Now</strong> and enter a <strong>Name</strong> (defines the permalink URL to your template), <strong>Description</strong> (displays along with your template on Koji), and other publish settings, as desired. Then, click <strong>Publish</strong>.</p>\n</div>\n<div class=\"paragraph\">\n<p>When publishing is completed, click the link in the message to view your live template on Koji. Your template is now available to remix and share anywhere on the web. You can create a fun version for yourself and share it on your favorite site to see what your friends make.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_as_built_sample_code\">\"As Built\" sample code</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>To see this blueprint as a completed template on Koji, visit the following link. From there, you can view the source code or remix the template into your own project.</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://withkoji.com/~RachelSienko06/blueprint-magazine-cover\">Blueprint: Magazine Cover</a></p>\n</div>\n<div class=\"paragraph\">\n<p>The following code is a completed sample of the template logic described in this blueprint.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"highlight\"><code class=\"language-javascript\" data-lang=\"javascript\">link:../codeSamples/magazineCoverReact.js[]</code></pre>\n</div>\n</div>\n</div>\n</div>","document":{"title":"Magazine Cover Template"},"pageAttributes":{"slug":"/blueprints-magazine-cover"}}}]}},"pageContext":{}}}